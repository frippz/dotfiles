" Plugin Manager
" ===========================================================================

call plug#begin('~/.vim/plugged')

" Regular plugins
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'editorconfig/editorconfig-vim'
Plug 'godlygeek/tabular'
Plug 'groenewege/vim-less'
Plug 'kien/ctrlp.vim'
Plug 'mattn/emmet-vim'
Plug 'morhetz/gruvbox'
Plug 'nelstrom/vim-qargs'
Plug 'raimondi/delimitMate'
Plug 'scrooloose/nerdtree'
Plug 'shougo/neocomplcache.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'yegappan/greplace'

" Syntax plugins
Plug 'brettof86/vim-swigjs'
Plug 'hail2u/vim-css3-syntax'
Plug 'plasticboy/vim-markdown'
Plug 'vim-scripts/nginx.vim'
Plug 'wavded/vim-stylus'

call plug#end()


" Plugs
" ===========================================================================

" Gruvbox
" ---------------------------------------------------------------------------
if !has("gui_running")
   let g:gruvbox_italic=0
endif

colorscheme gruvbox
set background=dark


" CSScomb
" ---------------------------------------------------------------------------

" Use npm installed CSScomb
autocmd FileType scss,css,less,styl nnoremap <buffer> <Leader>c :call CSScomb()<CR>
function! CSScomb()
  execute "silent !csscomb " . expand('%')
  redraw!
endfunction


" CtrlP
" ---------------------------------------------------------------------------

" Don't index files listed in gitignore.
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']


" Closetag
" ---------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.swig,*.tpl"


" Markdown preview
" ---------------------------------------------------------------------------
map <leader>p :Mm<CR>


" NERDTree
" ---------------------------------------------------------------------------

" Open with Ctrl-n
map <C-n> :NERDTreeToggle<CR>

" Close vim if NERDTree is last window open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Open NERDTree at current buffer root
" set autochdir
" let NERDTreeChDirMode=2
" nnoremap <leader>n :NERDTree .<CR>

" Show invisible files in NERDTree
let NERDTreeShowHidden=1


" NEOCOMPLCACHE
" ---------------------------------------------------------------------------

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0

" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1

" Use smartcase.
let g:neocomplcache_enable_smart_case = 1

" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"


" delimitMate
" ---------------------------------------------------------------------------
let delimitMate_expand_cr = 2


" Editorconfig
" ---------------------------------------------------------------------------
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:EditorConfig_exec_path = '/usr/local/bin/editorconfig'


" GitGutter
" ---------------------------------------------------------------------------
let g:gitgutter_sign_removed_first_line = "^_"
let g:gitgutter_max_signs = 1000
let g:gitgutter_sign_column_always = 1


" Vimgrep
" ---------------------------------------------------------------------------
nnoremap <S-Down> :cnext<CR>
nnoremap <S-Up>   :cprev<CR>


" Search
" ===========================================================================

set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"

" Remove search highlight
map <C-h> :noh<CR>



" Visual Stuff
" ===========================================================================

set number                  " show line numbers
set cursorline              " highlight the current line
set history=200             " remember a lot of stuff
set ruler                   " Always show info along bottom.


" Specify listchars with literal unicode in a :set command
scriptencoding utf-8
set list lcs=tab:▸\ ,eol:¬,trail:·

" Disable folding
set nofoldenable



" Files
" ===========================================================================

set autoread                " auto-reload files changed on disk
set updatecount=0           " disable swap files
set nobackup
set noswapfile


" Indentation
" ===========================================================================

set cindent
set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewherei


" Misc
" ===========================================================================

" Make copy operations work with the clipboard
set clipboard=unnamed

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Auto-create parent directories when expanding file
" Ref: http://stackoverflow.com/a/4294176/517528
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Set leader
let mapleader = ","

" Leader mappings
nmap <Leader>qn :cnext<CR>
nmap <Leader>qp :cprev<CR>

" Persistent undo
set undofile
set undodir=$HOME/.vim/undo
set undolevels=1000
set undoreload=10000
