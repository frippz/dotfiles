" Plugin Manager
" ===========================================================================

call plug#begin('~/.vim/plugged')

" Regular plugins
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'editorconfig/editorconfig-vim'
Plug 'godlygeek/tabular'
Plug 'gregsexton/MatchTag'
Plug 'groenewege/vim-less'
Plug 'kien/ctrlp.vim'
Plug 'mattn/emmet-vim'
Plug 'mileszs/ack.vim'
Plug 'morhetz/gruvbox'
Plug 'nelstrom/vim-qargs'
Plug 'raimondi/delimitMate'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'shougo/neocomplete.vim'
Plug 'shougo/deoplete.nvim'
Plug 'tmhedberg/matchit'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'yegappan/greplace'

" Syntax plugins
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'chrisbra/csv.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'mustache/vim-mustache-handlebars'
Plug 'plasticboy/vim-markdown'
Plug 'rosstimson/modx.vim'
Plug 'seveas/bind.vim'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-liquid'
Plug 'vim-scripts/nginx.vim'

call plug#end()


" General
" ===========================================================================

" Set leader
let mapleader = ","


" NeoVim only features
" ===========================================================================

if has('nvim')

  " True color support
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1

  " Allow change of cursor shape
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

endif


" Plugs
" ===========================================================================

" Gruvbox
" ---------------------------------------------------------------------------
if !has("gui_running")
   let g:gruvbox_italic=0
endif

colorscheme gruvbox
set background=dark


" CSScomb
" ---------------------------------------------------------------------------

" Use npm installed CSScomb
autocmd FileType css nnoremap <buffer> <Leader>c :call CSScomb()<CR>
function! CSScomb()
  execute "silent !csscomb " . expand('%')
  redraw!
endfunction


" CtrlP
" ---------------------------------------------------------------------------

" Don't index files listed in gitignore.
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']


" Closetag
" ---------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.swig,*.tpl"


" NERDTree
" ---------------------------------------------------------------------------

" Toggle with Ctrl-n
map <C-n> :NERDTreeToggle<CR>

" Show invisible files in NERDTree
let NERDTreeShowHidden=1


" deoplete (Load only in neovim)
" ---------------------------------------------------------------------------

if has('nvim')

  " Enable deoplete
  let g:deoplete#enable_at_startup = 1

  " use tab to forward cycle
  inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

  " use tab to backward cycle
  inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

endif

" neocomplete (Don't load in neovim)
" ---------------------------------------------------------------------------

if !has('nvim')

  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1

  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1

  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif

endif


" delimitMate
" ---------------------------------------------------------------------------
let delimitMate_expand_cr = 2


" Editorconfig
" ---------------------------------------------------------------------------
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:EditorConfig_exec_path = '/usr/local/bin/editorconfig'


" GitGutter
" ---------------------------------------------------------------------------
let g:gitgutter_sign_removed_first_line = "^_"
let g:gitgutter_max_signs = 1000
let g:gitgutter_sign_column_always = 1


" Syntastic
" ---------------------------------------------------------------------------
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 1


" Vimgrep
" ---------------------------------------------------------------------------

" Quick-jump between results using Shift-Up/Down
nnoremap <S-Down> :cnext<CR>
nnoremap <S-Up>   :cprev<CR>


" Search
" ===========================================================================
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"

" Remove search highlight
map <Leader>h :noh<CR>



" Visual Stuff
" ===========================================================================
set number                  " show line numbers
set cursorline              " highlight the current line
set history=200             " remember a lot of stuff
set ruler                   " Always show info along bottom.


" Specify listchars with literal unicode in a :set command
scriptencoding utf-8
set list lcs=tab:▸\ ,eol:¬,trail:·



" Code folding
" ===========================================================================

" Make sure folding does not occur automatically
set foldlevelstart=99

" Fold by indent level
set foldmethod=indent



" Files
" ===========================================================================

" auto-reload files changed on disk
set autoread

" check for changes after inactivity
au CursorHold * checktime

" disable swap files
set updatecount=0
set nobackup
set noswapfile



" Indentation
" ===========================================================================

set autoindent              " auto-indent
set tabstop=2               " tab spacing
set softtabstop=2           " unify
set shiftwidth=2            " indent/outdent by 2 columns
set shiftround              " always indent/outdent to the nearest tabstop
set expandtab               " use spaces instead of tabs
set smarttab                " use tabs at the start of a line, spaces elsewherei



" Syntaxes
" ===========================================================================

" swigjs (using jinja)
au BufRead,BufNewFile *.swig set filetype=jinja

" stylus (using SCSS syntax)
au BufRead,BufNewFile *.styl set filetype=scss

" git (symlinked)
au BufRead,BufNewFile gitconfig.symlink,gitignore.symlink setfiletype gitconfig

" nginx
au BufRead,BufNewFile */nginx/* set filetype=nginx

" JSON
au BufRead,BufNewFile *csslintrc*,*htmlhintrc*,*eslintrc* set filetype=json



" Misc
" ===========================================================================

" Enable mouse
set mouse=a

" Disable delays for <Leader>
set timeoutlen=1000 ttimeoutlen=0

" Speed up Ruby syntax highlighting
set re=1

" Default netrw list style
let g:netrw_liststyle=3

" Map netrw to Ctrl-E
map <C-E> :Ex<CR>

" Disable netrwhist
let g:netrw_dirhistmax = 0

" Remap some common actions
nnoremap <Leader>w :w<CR>
nnoremap <Leader>o :CtrlP<CR>

" Session options
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" Make copy operations work with the clipboard
set clipboard=unnamed

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Disable arrow keys
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Persistent undo
set undofile
set undodir=$HOME/.vim/undo
set undolevels=1000
set undoreload=10000
