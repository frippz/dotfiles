" Plugin Manager
" ===========================================================================

call plug#begin('~/.vim/plugged')

" Color themes
Plug 'morhetz/gruvbox'
Plug 'icymind/NeoSolarized'

" Regular plugins
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'amadeus/vim-convert-color-to'
Plug 'editorconfig/editorconfig-vim'
Plug 'godlygeek/tabular'
Plug 'gregsexton/MatchTag'
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'machakann/vim-highlightedyank'
Plug 'mattn/emmet-vim'
Plug 'mileszs/ack.vim'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'psliwka/vim-smoothie'
Plug 'raimondi/delimitMate'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'sheerun/vim-polyglot'
Plug 'skwp/greplace.vim'
Plug 'tmhedberg/matchit'
Plug 'tommcdo/vim-fubitive'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'w0rp/ale'

call plug#end()

" General
" ===========================================================================

" Set leader
let mapleader = ","

" NeoVim only features
" ===========================================================================

if has('nvim')

  " True color support
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1

  " Remap exit terminal mode
  tnoremap <Esc> <C-\><C-n>

  " Live substitution
  set inccommand=nosplit

endif

" Themes
" ===========================================================================

" Gruvbox
" ---------------------------------------------------------------------------
function! Gruvbox()
  colorscheme gruvbox
  set background=dark
endfunction

" Solarized Light
" ---------------------------------------------------------------------------
function! SolarizedLight()
  colorscheme NeoSolarized
  set background=light
  set termguicolors
  let g:neosolarized_contrast = "high"
  let g:neosolarized_bold = 1
  let g:neosolarized_underline = 0
  let g:neosolarized_italic = 1
endfunction

" Set theme based on $TERM_THEME (or fall back to Gruvbox)
" ---------------------------------------------------------------------------
if $TERM_THEME == 'SolarizedLight'
  call SolarizedLight()
else
  call Gruvbox()
endif

" Plugins
" ===========================================================================

" Ale
" ---------------------------------------------------------------------------
let g:ale_fixers = {
\ 'javascript': ['prettier','eslint'],
\ 'vue': ['prettier','eslint'],
\ 'css': ['prettier','stylelint']
\}

let g:ale_linters = {'javascript': ['eslint'],'css': ['stylelint']}

" Suppress eslintignore messages
let g:ale_javascript_eslint_suppress_eslintignore = 1

" Only run specified linters
let g:ale_linters_explicit = 1

" Don’t lint while typing
let g:ale_lint_on_text_changed = 0

" Lint after leaving insert mode instead
let g:ale_lint_on_insert_leave = 1

" Make sure linters use local config files
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_javascript_stylelint_use_local_config = 1

" Convert Color
" ---------------------------------------------------------------------------
nnoremap <leader>c :ConvertColorTo hsl<CR>

" fzf
" ---------------------------------------------------------------------------
set rtp+=~/.fzf

lua require("fzf")

autocmd! FileType fzf
autocmd  FileType fzf set nonu nornu

" Allow closing FZF with esc
autocmd! FileType fzf tnoremap <buffer> <esc> <c-c>

" Set environment variables
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
let $FZF_DEFAULT_OPTS='--layout=reverse'

let g:fzf_layout = { 'window': 'lua NavigationFloatingWin()' }

 " Open fzf Files
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(blue)%C(bold)%cr%C(white)"'

nmap <C-p> :FZF<CR>

" Closetag
" ---------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.tpl"

" GitGutter
" ---------------------------------------------------------------------------

" Make GitGutter work in NeoVim.
let g:gitgutter_async = 1
let g:gitgutter_sign_removed_first_line = "^_"

" NERDTree
" ---------------------------------------------------------------------------

" Toggle with Ctrl-n
map <C-n> :NERDTreeToggle<CR>

" Show invisible files in NERDTree
let NERDTreeShowHidden=1

" coc.nvim

" Extensions
" :CocInstall coc-vetur coc-html coc-css coc-svg coc-json coc-yaml coc-emmet coc-tsserver
" ---------------------------------------------------------------------------
" set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

let g:echodoc_enable_at_startup = 1

command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" delimitMate
" ---------------------------------------------------------------------------
let delimitMate_expand_cr = 1
let delimitMate_matchpairs = "(:),[:],{:}"

" Disable delimitMate per file type
" ---------------------------------------------------------------------------
au FileType html.handlebars,html.mustache let b:delimitMate_autoclose = 0

" Editorconfig
" ---------------------------------------------------------------------------
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Greplace
" ---------------------------------------------------------------------------
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

" Search
" ===========================================================================
set hlsearch                " highlight all results
set incsearch               " but do highlight as you type your search.
set ignorecase              " make searches case-insensitive...
set smartcase               " ... unless they contain at least one capital letter
set gdefault                " have :s///g flag by default on"

" Remove search highlight with Ctrl-L
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Visual Stuff
" ===========================================================================
set number                  " show line numbers
set cursorline              " highlight the current line
set history=200             " remember a lot of stuff
set ruler                   " Always show info along bottom.
set wrap                    " Wrap lines
set linebreak               " Don't break words

" Specify listchars (invisibles) with literal unicode in a :set command
scriptencoding utf-8
set list lcs=tab:▸\ ,eol:¬,trail:·,space:·
set nolist

" Map toggle invisibles
nnoremap <Leader>i :set list!<CR>

" Code folding
" ===========================================================================

" Make sure folding does not occur automatically
set foldlevelstart=99

" Fold by indent level
set foldmethod=indent

" Files
" ===========================================================================

" auto-reload files changed on disk
set autoread

" check for changes after inactivity
au CursorHold * checktime

" disable swap files
set updatecount=0
set nobackup
set noswapfile

" Indentation
" ===========================================================================

set autoindent                 " auto-indent
set tabstop=2                  " tab spacing
set softtabstop=2              " unify
set shiftwidth=2               " indent/outdent by 2 columns
set noshiftround               " don’t indent/outdent to the nearest tabstop
set expandtab                  " use spaces instead of tabs
set smarttab                   " use tabs at the start of a line, spaces elsewhere
set backspace=indent,eol,start " Backspace through anything in insert mode

" allow toggling between local and default mode
function! TabToggle()
  if &expandtab
    set shiftwidth=8
    set softtabstop=0
    set noexpandtab
  else
    set shiftwidth=2
    set softtabstop=2
    set expandtab
  endif
endfunction
nmap <F9> mz:execute TabToggle()<CR>'z

" Syntaxes
" ===========================================================================

" git (symlinked)
au BufRead,BufNewFile gitconfig.symlink,gitignore.symlink setfiletype gitconfig

" nginx
au BufRead,BufNewFile */nginx/*,nginx.conf set filetype=nginx

" JSON
au BufRead,BufNewFile *intrc*,*.json.* set filetype=json

" YAML
au BufRead,BufNewFile *.yml.*, set filetype=yaml

" Nunjucks
au BufRead,BufNewFile *.nunj set filetype=jinja.html

" Dockerfile
au BufRead,BufNewFile Dockerfile* set filetype=dockerfile

" Vue
let g:vue_pre_processors = []

" Misc
" ===========================================================================

" Enable mouse
set mouse=a

" Disable delays for <Leader>
set timeoutlen=1000
set ttimeout
set ttimeoutlen=0

" Use relative line numbers
set relativenumber
nnoremap <Leader>l :set relativenumber!<CR>

" Default netrw list style
let g:netrw_liststyle=3

" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
autocmd FileType netrw setl bufhidden=delete

" Allow netrw to remove non-empty local directories
let g:netrw_localrmdir='rm -r'

" Hide invisibles in netrw and NERDTree
autocmd FileType netrw setlocal nolist
autocmd FileType nerdtree setlocal nolist

" Disable signcolumn in NERDTree
autocmd FileType nerdtree setlocal signcolumn=no

" Hide files from netrw and NERDTree
let g:netrw_list_hide= '.*\.DS_Store$,node_modules,^\.git$,\.cache'
let NERDTreeIgnore = ['.DS_Store$', 'node_modules', '\.git$', '.cache']

" Map netrw to Ctrl-E
nnoremap <C-E> :Ex<CR>

" Disable netrwhist
let g:netrw_dirhistmax = 0

" Remap some common actions
nnoremap <Leader>w :w<CR>
nnoremap <Leader>o :CtrlP<CR>

" Escape insert mode with jj 😱
imap jj <Esc>

" Session options
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" Make copy operations work with the clipboard
set clipboard=unnamed

" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Navigate visual lines (when wrapped)
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Vim tabs
map <C-t> :tabnew <CR>

" Manually reload file
map <Leader>r :e!<CR>
